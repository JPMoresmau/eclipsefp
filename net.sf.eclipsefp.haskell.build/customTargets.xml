<project name="Build specific targets and properties" default="noDefault" basedir=".">

<!-- ===================================================================== -->
<!-- Run a given ${target} on all elements being built -->
<!-- ===================================================================== -->
<target name="allElements">
	<ant antfile="${genericTargets}" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="de.leiffrenzel.fp.haskell" />
	</ant>
</target>

<!-- ===================================================================== -->
<!-- Targets to assemble the built elements for particular configurations  -->
<!-- These generally call the generated assemble scripts (named in -->
<!-- ${assembleScriptName}) but may also add pre and post processing -->
<!-- Add one target for each root element and each configuration -->
<!-- ===================================================================== -->

<target name="assemble.de.leiffrenzel.fp.haskell">
	<property name="archiveName" value="net.sf.eclipsefp.haskell-${buildId}.zip"/>
	<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
</target>

<!-- ===================================================================== -->
<!-- Check out map files from correct repository -->
<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
<!-- ===================================================================== -->
<target name="checkLocal">
</target>

<target name="getMapFiles" depends="checkLocal" unless="mapsLocal">
</target>

<!-- ===================================================================== -->
<!-- Steps to do before setup -->
<!-- ===================================================================== -->
<target name="preSetup">
</target>

<!-- ===================================================================== -->
<!-- Steps to do after setup but before starting the build proper -->
<!-- ===================================================================== -->
<target name="postSetup">
	<exec executable="darcs" dir="${buildDirectory}">
		<arg value="get"/>
		<arg value="${builder}/.."/>
		<arg value="eclipsefp"/>
	</exec>
	<mkdir dir="${buildDirectory}/plugins"/>
	<mkdir dir="${buildDirectory}/features"/>
	<mkdir dir="${buildDirectory}/sites"/>
	<move todir="${buildDirectory}/plugins">
		<fileset dir="${buildDirectory}/eclipsefp">
			<exclude name="_darcs" />
			<exclude name="de.leiffrenzel.fp.haskell-feature/**" />
			<exclude name="net.sf.eclipsefp.updatesite/**" />
		</fileset>
	</move>
	<move file="${buildDirectory}/eclipsefp/de.leiffrenzel.fp.haskell-feature"
	      tofile="${buildDirectory}/features/de.leiffrenzel.fp.haskell"/>
	<move file="${buildDirectory}/eclipsefp/net.sf.eclipsefp.updatesite"
	      tofile="${buildDirectory}/sites/net.sf.eclipsefp.updatesite"/>
	<delete dir="${buildDirectory}/eclipsefp" />
</target>

<!-- ===================================================================== -->
<!-- Steps to do before fetching the build elements -->
<!-- ===================================================================== -->
<target name="preFetch">
</target>

<!-- ===================================================================== -->
<!-- Steps to do after fetching the build elements -->
<!-- ===================================================================== -->
<target name="postFetch">
</target>

<!-- ===================================================================== -->
<!-- Steps to do before generating build scripts -->
<!-- ===================================================================== -->
<target name="preGenerate">

</target>

<!-- ===================================================================== -->
<!-- Steps to do after generating the build scripts -->
<!-- ===================================================================== -->
<target name="postGenerate">
</target>

<!-- ===================================================================== -->
<!-- Steps to do before assembling -->
<!-- ===================================================================== -->
<target name="preAssemble">

</target>

<!-- ===================================================================== -->
<!-- Steps to do after assembling-->
<!-- ===================================================================== -->
<target name="postAssemble">
</target>


<!-- ===================================================================== -->
<!-- Steps to do before running the build.xmls for the elements being built. -->
<!-- ===================================================================== -->
<target name="preProcess">
	<!-- Before compiling everything, we need to translate the parser -->
	<!-- grammar files to Java -->
	<ant antfile="${buildDirectory}/plugins/net.sf.eclipsefp.haskell.core.jparser/build-parser.xml"
	     target="parser-build"
	     dir="${buildDirectory}/plugins/net.sf.eclipsefp.haskell.core.jparser"/>
</target>

<!-- ===================================================================== -->
<!-- Steps to do after running the build.xmls for the elements being built. -->
<!-- ===================================================================== -->
<target name="postProcess">
</target>

<!-- ===================================================================== -->
<!-- Steps to do after everything is built and assembled -->
<!-- (e.g., testing, posting, emailing, ...) -->
<!-- ===================================================================== -->
<target name="postBuild">
	<antcall target="gatherLogs" />
	<property name="update.site.staging.loc" value="${buildDirectory}/updateSite" />
	<antcall target="generateUpdateSite" />
</target>

<!-- ===================================================================== -->
<!-- Helper targets -->
<!-- ===================================================================== -->
<target name="gatherLogs">
    <mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
    <antcall target="allElements">
        <param name="target" value="gatherLogs" />
    </antcall>
	<unzip dest="${buildDirectory}/${buildLabel}/compilelogs"
			   overwrite="true">
		<fileset dir="${buildDirectory}/features">
			<include name="**/*.log.zip" />
		</fileset>
	</unzip>
</target>
	
<target name="generateUpdateSite" if="doGenerateUpdateSite">
	<!-- Create the directory structure -->
	<mkdir dir="${update.site.staging.loc}" />
	<mkdir dir="${update.site.staging.loc}/features" />
	<mkdir dir="${update.site.staging.loc}/plugins" />
	
	<antcall target="allElements">
	    <param name="genericTargets" value="${builder}/customTargets.xml"/>
	    <param name="target" value="updateSiteExport"/>
	</antcall>
	
	<copy file="${buildDirectory}/sites/net.sf.eclipsefp.updatesite/site.xml"
		  todir="${update.site.staging.loc}"/>
</target>
	
<target name="updateSiteExport">
	<ant antfile="build.xml" dir="${buildDirectory}/features/${id}/" target="build.update.jar">
		<property name="feature.destination" value="${update.site.staging.loc}/features"/>
    	<property name="plugin.destination" value="${update.site.staging.loc}/plugins"/>
	</ant>
	<zip basedir="${buildDirectory}/features/${id}.source/"
		 destfile="${update.site.staging.loc}/features/${id}.source_0.9.1.jar" />
	<delete>
		<fileset dir="${buildDirectory}/plugins/${id}.source/">
		    <include name="*.zip"/>
		</fileset>
	</delete>
	<zip basedir="${buildDirectory}/plugins/${id}.source/"
		 destfile="${update.site.staging.loc}/plugins/${id}.source_0.9.1.jar" />
</target>	
	
<target name="clean" unless="noclean">
	<antcall target="allElements">
		<param name="target" value="cleanElement" />
	</antcall>
</target>
<!-- ===================================================================== -->
<!-- Default target                                                        -->
<!-- ===================================================================== -->
<target name="noDefault">
	<echo message="You must specify a target when invoking this file" />
</target>

</project>
