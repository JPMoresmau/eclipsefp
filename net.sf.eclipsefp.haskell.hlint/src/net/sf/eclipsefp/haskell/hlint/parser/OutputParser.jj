/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";
  LOOKAHEAD = 3;
  FORCE_LA_CHECK = true;  static = false;}PARSER_BEGIN(OutputParser)package net.sf.eclipsefp.haskell.hlint.parser;

import java.util.*;
import net.sf.eclipsefp.haskell.hlint.*;

public class OutputParser{  }PARSER_END(OutputParser)
TOKEN :
{  < SPACE : " " >
| < EOL : "\n" | "\r" | "\r\n" >
| < COLON : ":" >
| < COLON_SLASH : ":\\" | ":/" > 
| < INTEGER : (["0"-"9"])+ >
| < OTHER_CHAR : ~[ "\n", "\r", ":" ] >

}

List<Suggestion> suggestions() :
{
  ArrayList<Suggestion > sugs= new ArrayList<Suggestion>();
  Suggestion sug;
  SourceLocation loc;
}
{  (	    (		    (
			  loc=location()
		      (		         error()
		         |			     (					    sug = suggestion()
					    {
					      sug.setLocation(loc);					      sugs.add(sug);
					    }
				 )	
			  )
			)*
		  < INTEGER >
		  string_until_eol()
	  ) |
	  ("No suggestions"
	  < EOL >	  )
  )
  
	  
  
  < EOF >
  {    return sugs;
  }
}
void error() :
{
}
{  "Parse error"
  < EOL >
  "Error message:"
  < EOL >
  < SPACE >
  < SPACE >
  "Parse error"
  string_until_eol()
  "Code:"
  < EOL >
  source_code()
  < EOL >
}

SourceLocation location():
{  StringBuilder filename;
  Integer line;
  Integer column;
}
{
  filename = filename()
  line = number()
  column = number()
  < SPACE >
  {
    return new SourceLocation(filename.toString().replace("\\\\","\\"), line, column);  }}
Suggestion suggestion() :{
  StringBuilder filename;
  Integer line;
  ;
  Severity sev;
  StringBuilder message;
  CodeModification pre;
  CodeModification post;
}{
  sev = severity()
  < SPACE >
  message = string_until_eol()
  pre = code_mod()
  post = code_mod()
  ("Note:" string_until_eol()
  )?
  < EOL >
  {    Suggestion s = new Suggestion();
    s.setSeverity(sev);
    s.setMessage(message.toString());
    s.setPre(pre);
    s.setPost(post);
    return s;  }}

StringBuilder filename():
{
   Token c;
   StringBuilder s=new StringBuilder();
   StringBuilder rest=new StringBuilder();}
{
  (    (
    c=< COLON_SLASH >
	    {
	      s.append(c.image);
	    }
	  )
	|  (
   c=< OTHER_CHAR >
    {
      s.append(c.image);
    })
        |  (
   c=< SPACE >
    {
      s.append(c.image);
    })
   )
   rest=string_until_colon()
   {	s.append(rest);
	return s;
   }}


StringBuilder string_until_colon() :
{  Token c;
  Token c1, c2;
  StringBuilder s=new StringBuilder();
}
{
  ((    c=< COLON_SLASH >
	    {
	      s.append(c.image);	    }
	  )
	|  (
   c=< OTHER_CHAR >
    {
      s.append(c.image);
    })
        |  (
   c=< SPACE >
    {
      s.append(c.image);
    })
     |  (
   c=< INTEGER >
    {
      s.append(c.image);
    })
  )*
  < COLON >
  {	return s;
  }}
/*{
  c = < OTHER_CHAR >  s = string_until_colon()
  {    s.insert(0, c.image);
    return s;
  }
| c = < INTEGER >
  s = string_until_colon()
  {
    s.insert(0, c.image);
    return s;
  }
| c = < SPACE >
  s = string_until_colon()
  {
    s.insert(0, c.image);
    return s;
  }
| c = < COLON_SLASH >
  s = string_until_colon()
  {
    s.insert(0, c.image);
    return s;
  }
| < COLON >
  {    return new StringBuilder();
  }
}*/

StringBuilder string_until_eol() :
{
  Token c;
  StringBuilder s=new StringBuilder();
}
{  ((
    c=< COLON_SLASH >
	    {
	      s.append(c.image);
	    }
	  )
	|  (
   c=< OTHER_CHAR >
    {
      s.append(c.image);
    })
    |  (
   c=< COLON >
    {
      s.append(c.image);
    })
    |  (
   c=< SPACE >
    {
      s.append(c.image);
    })
     |  (
   c=< INTEGER >
    {
      s.append(c.image);
    })
  )*
  < EOL >
  {
	return s;
  }
}
/*{
  c = < OTHER_CHAR >
  s = string_until_eol()
  {
    s.insert(0, c.image);
    return s;
  }
| c = < SPACE >
  s = string_until_eol()
  {
    s.insert(0, c.image);
    return s;
  }
| c = < COLON_SLASH >
  s = string_until_eol()
  {
    s.insert(0, c.image);
    return s;
  }
| c = < COLON >
  s = string_until_eol()
  {
    s.insert(0, c.image);
    return s;
  }
| < EOL >
  {
    return new StringBuilder();
  }
}*/

Integer number() :
{
  Token c;
}
{
  c = < INTEGER >
  < COLON >
  {
    return Integer.valueOf(c.image);
  }
}

Severity severity() :
{
  StringBuilder sb;
}{
  sb = string_until_colon()
  {
    String s = sb.toString();    if (s.equals("Ignore"))
      return Severity.IGNORE;
    else if (s.equals("Warning"))
      return Severity.WARNING;
    else if (s.equals("Error"))
      return Severity.ERROR;
    else
      return null;
  }
}

CodeModification code_mod() :
{
  StringBuilder s;}
{
  string_until_eol() // Get the message
  {
    s = null;
  }
  (     s = source_code()
  )?
  {
    if (s != null)
      return new CodeModificationText(s.toString());
    else
      return new CodeModificationRemove();
  }
}

StringBuilder source_code_line() :
{
  StringBuilder line;}
{  < SPACE >
  < SPACE >
  line = string_until_eol()
  {    return line;
  }
}

StringBuilder source_code() :
{  StringBuilder line;
  StringBuilder all;
}
{  all = source_code_line()
  (    line = source_code_line()
    {
      all.append('\n');      all.append(line.toString());
    }
  )*
  {    return all;
  } 
}