- hlint parameters/options
	- per project
	- per worskpace
	https://sourceforge.net/p/eclipsefp/discussion/371922/thread/b68eb615/?limit=25#3056

	- scan hlint data directory and get all files different than HLint.hs?
	- encoding -> automatically find file encoding and use it!
	- allow global parameters

- turn off scion browser in workspace
	https://sourceforge.net/p/eclipsefp/discussion/371922/thread/88c58cc0/?limit=25#d6d1

- display warnings + quick fix on unused dependencies in cabal
	https://sourceforge.net/p/eclipsefp/discussion/371922/thread/063caf95/?limit=25#f901
	use usage

- cabal-db and packdeps integration
	http://tab.snarc.org/posts/haskell/2013-03-13-cabal-db.html

types of parameters?

- quick fix on missing package 
	-> install package -> Done
	-> event when installing packages
		-> parse package name
		-> clean and rebuild projects that are broken because of this missing package if automatic build is enabled

- global action to remove all useless imports (in file editor, on several files in navigator)
- global action to clean all imports: only import what's needed
	-> from import Package.Module to import Package.Module(Type(Constructor), function)



- show packages in error in Cabal Packages view (error overlay on icon) + errors + enable install button
	- list of packages in error

- fix all hlint suggestions on project?

- code navigation like chris done? http://dl.dropbox.com/u/62227452/Screenshots/code-navigationz-moving.ogv
	keep locations from ast? 
	Does Eclipse provide easy way to do that in the editor?
	Yes, Eclipse does it for Java: http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fref-menu-edit.htm
		So we need to:
			- have buildwrapper build1 return the locations from the AST
			- implement the navigation ourselves in the AST location tree


- latest version of haskell-src-exts exposes lexer, would that be better to use than GHC lexer?

- achievements!
	- causing a GHC panic "the impossible happened"
	- big functions: more than n lines?
	- more than N Language extensions
	- haddock comment much longer than function
	- more than N dependent packages in cabal file
	

- "visual programming"
	- define expressions
	- the expressions get revaluated every time the file is changed
	- expressions could be assigned with "viewers"
		-> show images, play sound, etc

- clean up preferences
	- no option for GHC/GHCi: we need to know what options to ignore for GHCi, since these options are going to appear in the Cabal file
	- GHC options on each project as well

- GHC 6.12 -dynamic option (http://mostlycode.wordpress.com/2010/01/26/ghc-6-12-1-dynamic-executables-fun/)

- code manipulation: should be pluggable into scion without recompiling???
	- broken refactorings (point free, etc...)

- files not haskell in source folders could go into data-files automatically


- run Ghci with proper flags done partially
	- ask which cabal component to take
	- what about conditional in cabal (like scion: if ghc impl...)
	- remove inproper options
	- ignore .ghci file option? (http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci-dot-files.html -ignore-dot-ghci)

.ghci file parsing/editor?? (http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci-dot-files.html http://neilmitchell.blogspot.com/2010/01/using-ghci-files-to-run-projects.html http://neilmitchell.blogspot.com/2010/01/better-ghci-files.html)

- integrate with packagedeps
- integrate with hspec
- integrate analysis tools like hpc, HaskaBelle
- integrate runtime tools like criterion
- integrate HaRe for refactoring?

- debugging 
	- column on breakpoint??
	- better system to force evaluation? Done with custom value setter calling :force what about calling seq ... ()?
	- reloading modules when stopped seems to cause breakpoints to disappear in GHCi, to check

- add Haskell nature + related files to existing project

- project rename
- module rename (rename file + module name + imports ) (in cabal already done) -> done, to check

- CAPRI http://www.haskell.org/haskellwiki/Capri to install scion
	- built-in -> install global/local/project
