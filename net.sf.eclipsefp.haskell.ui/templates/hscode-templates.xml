<?xml version="1.0" encoding="UTF-8"?>
<templates>

<!-- 'import' statement -->
<!-- 
<template
  name="import"
  description="%CodeTemplates.import.description"
  id="net.sf.eclipsefp.haskell.templates.import"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>import ${module}</template>
-->

<!-- General Abstract Data Types -->
<template
  name="gadt"
  description="%CodeTemplates.gadt.description"
  id="net.sf.eclipsefp.haskell.templates.gadt"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>data ${typename} where
  ${constructor} :: ${typename}
</template>

<template
  name="data"
  description="%CodeTemplates.gadt.description"
  id="net.sf.eclipsefp.haskell.templates.data_gadt"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>data ${typename} where
  ${constructor} :: ${typename}
</template>

<!-- 'case' expression -->
<template
  name="case"
  description="%CodeTemplates.case.description"
  id="net.sf.eclipsefp.haskell.templates.case"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>case ${expression} of
</template>

<!-- Haskell 98 data type/constructor -->
<template
  name="data"
  description="%CodeTemplates.h98datactor.description"
  id="net.sf.eclipsefp.haskell.templates.data98"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>data ${expression} = ${constructor}${cursor}
</template>

<!-- 'do' block -->
<template
  name="do"
  description="%CodeTemplates.do.description"
  id="net.sf.eclipsefp.haskell.templates.monad.do"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>do
  -- %CodeTemplates.do.text
  ${cursor}return undefined
</template>

<!-- 'let' expression -->
<template
  name="let"
  description="%CodeTemplates.let.description"
  id="net.sf.eclipsefp.haskell.templates.let"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>let ${var} = ${value}
in  ${expression}
</template>

<!-- 'newtype' expression -->
<template
  name="newtype"
  description="%CodeTemplates.newtype.description"
  id="net.sf.eclipsefp.haskell.templates.newtype"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>newtype ${newtype} = ${existingType}
</template>

<!-- 'class' declaration -->
<template
  name="class"
  description="%CodeTemplates.class.description"
  id="net.sf.eclipsefp.haskell.templates.class"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>class ${name} where
  -- %CodeTemplates.class.text
  ${function} :: ${signature}
</template>

<!-- Type context expression -->
<template
  name="=>"
  description="%CodeTemplates.context.description"
  id="net.sf.eclipsefp.haskell.templates.context"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>(${classTypeName}) => ${typeName}</template>

<!--
 Haddock documentation templates
-->

<template
  name="--"
  description="%CodeTemplates.double_dash.description"
  id="net.sf.eclipsefp.haskell.templates.double_dash"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>-- ${cursor}
</template>

<template
  name="{-"
  description="%CodeTemplates.multiline.description"
  id="net.sf.eclipsefp.haskell.templates.multiline"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>{-
${cursor}
-}
</template>

<template
  name="-- |"
  description="%CodeTemplates.double_dash_haddock_next.description"
  id="net.sf.eclipsefp.haskell.templates.double_dash_haddock_next"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>-- | ${cursor}
</template>

<template
  name="-- ^"
  description="%CodeTemplates.double_dash_haddock_prev.description"
  id="net.sf.eclipsefp.haskell.templates.double_dash_haddock_prev"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>-- ^ ${cursor}
</template>

<template
  name="{- |"
  description="%CodeTemplates.multiline_haddock_next.description"
  id="net.sf.eclipsefp.haskell.templates.multiline_haddock_next"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>{- | ${cursor}
-}
</template>

<template
  name="{- ^"
  description="%CodeTemplates.multiline_haddock_prev.description"
  id="net.sf.eclipsefp.haskell.templates.multiline_haddock_prev"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>{- ^ ${cursor}
-}
</template>
</templates>
