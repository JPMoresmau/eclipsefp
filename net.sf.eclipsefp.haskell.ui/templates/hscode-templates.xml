<?xml version="1.0" encoding="UTF-8"?>
<templates>

<!-- General Abstract Data Types -->
<template
  name="gadt"
  description="%CodeTemplates.gadt.description"
  id="net.sf.eclipsefp.haskell.templates.gadt"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>data ${typename} where
  ${constructor} :: ${typename}
</template>

<template
  name="data"
  description="%CodeTemplates.gadt.description"
  id="net.sf.eclipsefp.haskell.templates.data_gadt"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>data ${typename} where
  ${constructor} :: ${typename}
</template>

<!-- 'case' expression -->
<template
  name="case"
  description="%CodeTemplates.case.description"
  id="net.sf.eclipsefp.haskell.templates.case"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>case ${expression} of
</template>

<!-- Haskell 98 data type/constructor -->
<template
  name="data"
  description="%CodeTemplates.h98datactor.description"
  id="net.sf.eclipsefp.haskell.templates.data98"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>data ${expression} = ${constructor}${cursor}
</template>

<!-- 'do' block -->
<template
  name="do"
  description="%CodeTemplates.do.description"
  id="net.sf.eclipsefp.haskell.templates.monad.do"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>do
  -- ${todo}: Add Monad code
  ${cursor}return undefined
</template>

<!-- 'let' expression -->
<template
  name="let"
  description="%CodeTemplates.let.description"
  id="net.sf.eclipsefp.haskell.templates.let"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>let
    ${var} = ${value}
  in ${expression}
</template>

<!-- 'newtype' expression -->
<template
  name="newtype"
  description="%CodeTemplates.newtype.description"
  id="net.sf.eclipsefp.haskell.templates.newtype"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>newtype ${newtype} = ${existingType}
</template>

<!-- 'class' expression -->
<template
  name="class"
  description="%CodeTemplates.class.description"
  id="net.sf.eclipsefp.haskell.templates.class"
  context="net.sf.eclipsefp.haskell.ui.internal.editors.haskell.codeassist.hscodetemplates"
  enabled="true"
  autoinsert="false"
>class ${name} where
  -- ${todo} Add class function signatures
  ${function} :: ${signature}
</template>
</templates>